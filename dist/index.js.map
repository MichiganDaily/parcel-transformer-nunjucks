{"mappings":";;;;;;;;;;;;;;;IAGA,wCA2BG,GA3BY,GAAG,CAAC,+BAAW,CAAC,CAAC;UACxB,UAAU,EAAC,CAAC,SAAC,MAAM,EAAC,CAAC,EAAE,CAAC;YAOjB,IAA6C;QANxD,EAAmB,AAAnB,iBAAmB;QACnB,KAAK,CAAC,CAAC,WAAC,QAAQ,EAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAAA,CAAa;QAAA,CAAC;QAC3D,EAA8B,AAA9B,4BAA8B;QAC9B,GAAG,CAAC,MAAM,GAAG,IAAI;QACjB,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAC,CAAC,IAAK,CAAC,CAAC,cAAc,CAAC,CAAS;;QACtE,EAAE,EAAE,OAAO,CAAC,MAAM,KAAK,CAAC,EACtB,MAAM,IAAG,IAA6C,GAA5C,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAAA,OAAO,CAAC,CAAC,EAAE,MAAM;QAAA,CAAC,eAA3C,IAA6C,KAA7C,IAAI,CAAJ,CAAuD,GAAvD,IAAI,CAAJ,CAAuD,GAAvD,IAA6C,CAAE,QAAQ;aAE7D,EAAE,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,EACzB,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,QAAO,GAAG;gBAAI,GAAsC;oBAAtC,GAAsC,GAArC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBAAA,GAAG,CAAC,MAAM;YAAA,CAAC,eAApC,GAAsC,KAAtC,IAAI,CAAJ,CAAgD,GAAhD,IAAI,CAAJ,CAAgD,GAAhD,GAAsC,CAAE,QAAQ;;QAGtG,MAAM,CAAC,CAAC;YACN,MAAM,EAAE,QAAQ;YAChB,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ;oBACzB,MAAM;QACR,CAAC;IACH,CAAC;UACK,SAAS,EAAC,CAAC,QAAC,KAAK,WAAE,MAAM,EAAC,CAAC,EAAE,CAAC;QAClC,yBAAS,CAAC,CAAC;YAAC,UAAU,EAAE,KAAK;QAAC,CAAC;QAC/B,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO;QAC9B,GAAG,CAAC,MAAM,GAAG,4BAAY,CAAC,IAAI,EAAE,MAAM;QACtC,KAAK,CAAC,OAAO,CAAC,MAAM;QACpB,MAAM,CAAC,CAAC;YAAA,KAAK;QAAA,CAAC;IAChB,CAAC;AACH,CAAC","sources":["src/index.js"],"sourcesContent":["import { Transformer } from \"@parcel/plugin\";\nimport { renderString, configure } from \"nunjucks\";\n\nexport default new Transformer({\n  async loadConfig({ config }) {\n    // load config file\n    const { contents } = await config.getConfig([\"config.json\"]);\n    // find archie files to insert\n    let archie = null;\n    const confaml = contents.fetch.filter(d => !d.hasOwnProperty(\"sheetId\"));\n    if (confaml.length === 1) {\n      archie = (await config.getConfig([confaml[0].output]))?.contents;\n    }\n    else if (confaml.length > 1) {\n      archie = await Promise.all(confaml.map(async aml => (await config.getConfig([aml.output]))?.contents));\n    }\n\n    return {\n      config: contents,\n      env: process.env.NODE_ENV,\n      archie,\n    };\n  },\n  async transform({ asset, config }) {\n    configure({ autoescape: false })\n    let code = await asset.getCode();\n    let result = renderString(code, config)\n    asset.setCode(result)\n    return [asset];\n  },\n});\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}